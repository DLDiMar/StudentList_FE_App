{"ast":null,"code":"var _jsxFileName = \"/home/dominicldimarco/hatchways_interview_11-2021/src/App.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from \"react\";\nimport StudentDataCard from \"./components/studentDataCard/StudentDataCard\";\nimport ContentFilter from \"./components/contentFilter/ContentFilter\";\nimport styles from \"./App.module.css\"; //Chose to use modular css to make the css more obviously tied to the relevant components\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction App() {\n  _s();\n\n  const [studentDataInfo, studentDataInfoSet] = useState([]);\n  const [filterContent, setFilterContent] = useState([]);\n  const [nameFilter, setNameFilter] = useState([]);\n  const [tagFilter, setTagFilter] = useState([]);\n\n  const addTag = (str, index) => {\n    const tagForStudentData = [...studentDataInfo];\n    tagForStudentData[index].tags.push(str);\n    studentDataSet(tagForStudentData);\n  }; // filter functions for sorting content\n\n\n  const nameFilterFunction = str => {\n    let newNameFilter = [];\n    studentDataInfo.map(student => {\n      const fullName = `${student.firstName} ${student.lastName}`.toLowerCase();\n\n      if (fullName.includes(str)) {\n        newNameFilter.push(student);\n      }\n    });\n    let contentFilter = [];\n    tagFilter.map(student => {\n      const fullName = `${student.firstName} ${student.lastName}`.toLowerCase();\n\n      if (fullName.includes(str)) {\n        contentFilter.push(student);\n      }\n    });\n    setFilterContent(contentFilter);\n    setNameFilter(newNameFilter);\n  };\n\n  const tagFilterFunction = str => {\n    if (str) {\n      let newTagFilter = [];\n      let newContentFilter = [];\n      studentDataInfo.map(student => {\n        let tagged = false;\n        student.tags.map(tag => {\n          if (tag.includes(str)) {\n            tagged = true;\n          }\n        });\n\n        if (tagged) {\n          newTagFilter.push(student);\n        }\n      });\n      filterContent.map(student => {\n        let tagged = false;\n        student.tags.map(tag => {\n          if (tag.includes(str)) {\n            tagged = true;\n          }\n        });\n\n        if (tagged) {\n          newContentFilter.push(student);\n        }\n      });\n      setFilterContent(newContentFilter);\n      setTagFilter(newTagFilter);\n    } else {\n      setFilterContent(nameFilter);\n      setTagFilter(studentDataInfo);\n    }\n  }; //api call\n\n\n  async function fetchUrl(url) {\n    const response = await fetch(url);\n    const json = await response.json();\n    let newStudentData = [];\n    json.students.map(student => {\n      let addTags = student;\n      addTags.tags = [];\n      newStudentData.push(addTags);\n    });\n    studentDataSet(newStudentData);\n    setFilterContent(newStudentData);\n    setNameFilter(newStudentData);\n    setTagFilter(newStudentData);\n  }\n\n  useEffect(() => {\n    fetchUrl(`https://api.hatchways.io/assessment/students`);\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: styles.background,\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: styles.centralContainer,\n      children: [/*#__PURE__*/_jsxDEV(ContentFilter, {\n        filterFunction: nameFilterFunction,\n        type: `name`\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 99,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(ContentFilter, {\n        filterFunction: tagFilterFunction,\n        type: `tag`\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 100,\n        columnNumber: 9\n      }, this), filterContent.map((student, index) => {\n        function findAverage(array) {\n          let sum = 0;\n\n          for (let i = 0; i < array.length; i++) {\n            sum += parseInt(array[i]);\n          }\n\n          let average = sum / array.length;\n          return average;\n        }\n\n        const averageGrade = findAverage(student.grades);\n        return /*#__PURE__*/_jsxDEV(StudentDataCard, {\n          index: index,\n          img: student.pic,\n          firstName: student.firstName,\n          lastName: student.lastName,\n          email: student.email,\n          company: student.company,\n          skill: student.skill,\n          grades: student.grades,\n          averageGrade: averageGrade,\n          tags: student.tags,\n          addTag: addTag\n        }, index.toString(), false, {\n          fileName: _jsxFileName,\n          lineNumber: 112,\n          columnNumber: 13\n        }, this);\n      })]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 98,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 97,\n    columnNumber: 5\n  }, this);\n}\n\n_s(App, \"dIiW+fMViSULqKeriIErSC+CF68=\");\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["/home/dominicldimarco/hatchways_interview_11-2021/src/App.js"],"names":["React","useState","useEffect","StudentDataCard","ContentFilter","styles","App","studentDataInfo","studentDataInfoSet","filterContent","setFilterContent","nameFilter","setNameFilter","tagFilter","setTagFilter","addTag","str","index","tagForStudentData","tags","push","studentDataSet","nameFilterFunction","newNameFilter","map","student","fullName","firstName","lastName","toLowerCase","includes","contentFilter","tagFilterFunction","newTagFilter","newContentFilter","tagged","tag","fetchUrl","url","response","fetch","json","newStudentData","students","addTags","background","centralContainer","findAverage","array","sum","i","length","parseInt","average","averageGrade","grades","pic","email","company","skill","toString"],"mappings":"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","sourcesContent":["\n  \nimport React, { useState, useEffect } from \"react\";\nimport StudentDataCard from \"./components/studentDataCard/StudentDataCard\";\nimport ContentFilter from \"./components/contentFilter/ContentFilter\";\nimport styles from \"./App.module.css\";\n//Chose to use modular css to make the css more obviously tied to the relevant components\n\nfunction App() {\n\n  const [studentDataInfo, studentDataInfoSet] = useState([]);\n  const [filterContent, setFilterContent] = useState([]);\n  const [nameFilter, setNameFilter] = useState([]);\n  const [tagFilter, setTagFilter] = useState([]);\n\n  const addTag = (str, index) => {\n    const tagForStudentData = [...studentDataInfo];\n    tagForStudentData[index].tags.push(str);\n    studentDataSet(tagForStudentData);\n  };\n\n  // filter functions for sorting content\n  const nameFilterFunction = str => {\n    let newNameFilter = [];\n    studentDataInfo.map(student => {\n      const fullName = `${student.firstName} ${student.lastName}`.toLowerCase();\n      if (fullName.includes(str)) {\n        newNameFilter.push(student);\n      }\n    });\n    let contentFilter = [];\n    tagFilter.map(student => {\n      const fullName = `${student.firstName} ${student.lastName}`.toLowerCase();\n      if (fullName.includes(str)) {\n        contentFilter.push(student);\n      }\n    });\n    setFilterContent(contentFilter);\n    setNameFilter(newNameFilter);\n  };\n\n  const tagFilterFunction = str => {\n    if (str) {\n      let newTagFilter = [];\n      let newContentFilter = [];\n\n      studentDataInfo.map(student => {\n        let tagged = false;\n        student.tags.map(tag => {\n          if (tag.includes(str)) {\n            tagged = true;\n          }\n        });\n        if (tagged) {\n          newTagFilter.push(student);\n        }\n      });\n      filterContent.map(student => {\n        let tagged = false;\n        student.tags.map(tag => {\n          if (tag.includes(str)) {\n            tagged = true;\n          }\n        });\n        if (tagged) {\n          newContentFilter.push(student);\n        }\n      });\n      setFilterContent(newContentFilter);\n      setTagFilter(newTagFilter);\n    } else {\n      setFilterContent(nameFilter);\n      setTagFilter(studentDataInfo);\n    }\n  };\n\n  //api call\n  async function fetchUrl(url) {\n    const response = await fetch(url);\n    const json = await response.json();\n    let newStudentData = [];\n    json.students.map(student => {\n      let addTags = student;\n      addTags.tags = [];\n      newStudentData.push(addTags);\n    });\n    studentDataSet(newStudentData);\n    setFilterContent(newStudentData);\n    setNameFilter(newStudentData);\n    setTagFilter(newStudentData);\n  }\n\n  useEffect(() => {\n    fetchUrl(`https://api.hatchways.io/assessment/students`); \n  }, []);\n  return (\n    <div className={styles.background}>\n      <div className={styles.centralContainer}>\n        <ContentFilter filterFunction={nameFilterFunction} type={`name`} />\n        <ContentFilter filterFunction={tagFilterFunction} type={`tag`} />\n        {filterContent.map((student, index) => {\n          function findAverage(array) {\n            let sum = 0;\n            for (let i = 0; i < array.length; i++) {\n              sum += parseInt(array[i]);\n            }\n            let average = sum / array.length;\n            return average;\n          }\n          const averageGrade = findAverage(student.grades);\n          return (\n            <StudentDataCard\n              key={index.toString()}\n              index={index}\n              img={student.pic}\n              firstName={student.firstName}\n              lastName={student.lastName}\n              email={student.email}\n              company={student.company}\n              skill={student.skill}\n              grades={student.grades}\n              averageGrade={averageGrade}\n              tags={student.tags}\n              addTag={addTag}\n            />\n          );\n        })}\n      </div>\n    </div>\n  );\n}\n\nexport default App;"]},"metadata":{},"sourceType":"module"}