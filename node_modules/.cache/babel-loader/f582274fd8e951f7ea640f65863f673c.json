{"ast":null,"code":"var _jsxFileName = \"/home/dominicldimarco/hatchways_interview_11-2021/src/App.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from \"react\";\nimport StudentDataCard from \"./components/studentDataCard/StudentDataCard\";\nimport ContentFilter from \"./components/contentFilter/ContentFilter\";\nimport styles from \"./App.module.css\"; //Chose to use modular css to make the css more obviously tied to the relevant components\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction App() {\n  _s();\n\n  const [studentDataInfo, studentDataSet] = useState([]);\n  const [contentFilter, contentFilterSet] = useState([]);\n  const [nameFilter, nameFilterSet] = useState([]);\n  const [tagFilter, setTagFilter] = useState([]);\n\n  const addTag = (str, index) => {\n    const tagForStudentData = [...studentDataInfo];\n    tagForStudentData[index].tags.push(str);\n    studentDataSet(tagForStudentData);\n  }; // filter functions for sorting content\n\n\n  const nameFilterFunction = str => {\n    let newNameFilter = [];\n    studentDataInfo.map(student => {\n      const fullName = `${student.firstName} ${student.lastName}`.toLowerCase();\n\n      if (fullName.includes(str)) {\n        newNameFilter.push(student);\n      }\n    });\n    let contentFilter = [];\n    tagFilter.map(student => {\n      const fullName = `${student.firstName} ${student.lastName}`.toLowerCase();\n\n      if (fullName.includes(str)) {\n        contentFilter.push(student);\n      }\n    });\n    contentFilterSet(contentFilter);\n    nameFilterSet(newNameFilter);\n  };\n\n  const tagFilterFunction = str => {\n    if (str) {\n      let newTagFilter = [];\n      let newContentFilter = [];\n      studentDataInfo.map(student => {\n        let tagged = false;\n        student.tags.map(tag => {\n          if (tag.includes(str)) {\n            tagged = true;\n          }\n        });\n\n        if (tagged) {\n          newTagFilter.push(student);\n        }\n      });\n      contentFilter.map(student => {\n        let tagged = false;\n        student.tags.map(tag => {\n          if (tag.includes(str)) {\n            tagged = true;\n          }\n        });\n\n        if (tagged) {\n          newContentFilter.push(student);\n        }\n      });\n      contentFilterSet(newContentFilter);\n      setTagFilter(newTagFilter);\n    } else {\n      contentFilterSet(nameFilter);\n      setTagFilter(studentDataInfo);\n    }\n  }; //api call\n\n\n  async function fetchUrl(url) {\n    const response = await fetch(url);\n    const json = await response.json();\n    let newStudentData = [];\n    json.students.map(student => {\n      let addTags = student;\n      addTags.tags = [];\n      newStudentData.push(addTags);\n    });\n    studentDataSet(newStudentData);\n    contentFilterSet(newStudentData);\n    nameFilterSet(newStudentData);\n    setTagFilter(newStudentData);\n  }\n\n  useEffect(() => {\n    fetchUrl(`https://api.hatchways.io/assessment/students`);\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: styles.background,\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: styles.centralContainer,\n      children: [/*#__PURE__*/_jsxDEV(ContentFilter, {\n        filterFunction: nameFilterFunction,\n        type: `name`\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 99,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(ContentFilter, {\n        filterFunction: tagFilterFunction,\n        type: `tag`\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 100,\n        columnNumber: 9\n      }, this), contentFilter.map((student, index) => {\n        function findAverage(array) {\n          let sum = 0;\n\n          for (let i = 0; i < array.length; i++) {\n            sum += parseInt(array[i]);\n          }\n\n          let average = sum / array.length;\n          return average;\n        }\n\n        const averageGrade = findAverage(student.grades);\n        return /*#__PURE__*/_jsxDEV(StudentDataCard, {\n          index: index,\n          img: student.pic,\n          firstName: student.firstName,\n          lastName: student.lastName,\n          email: student.email,\n          company: student.company,\n          skill: student.skill,\n          grades: student.grades,\n          averageGrade: averageGrade,\n          tags: student.tags,\n          addTag: addTag\n        }, index.toString(), false, {\n          fileName: _jsxFileName,\n          lineNumber: 112,\n          columnNumber: 13\n        }, this);\n      })]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 98,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 97,\n    columnNumber: 5\n  }, this);\n}\n\n_s(App, \"bvlPrg66qOYH06IVhsb2vNjHXCw=\");\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["/home/dominicldimarco/hatchways_interview_11-2021/src/App.js"],"names":["React","useState","useEffect","StudentDataCard","ContentFilter","styles","App","studentDataInfo","studentDataSet","contentFilter","contentFilterSet","nameFilter","nameFilterSet","tagFilter","setTagFilter","addTag","str","index","tagForStudentData","tags","push","nameFilterFunction","newNameFilter","map","student","fullName","firstName","lastName","toLowerCase","includes","tagFilterFunction","newTagFilter","newContentFilter","tagged","tag","fetchUrl","url","response","fetch","json","newStudentData","students","addTags","background","centralContainer","findAverage","array","sum","i","length","parseInt","average","averageGrade","grades","pic","email","company","skill","toString"],"mappings":"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","sourcesContent":["\n  \nimport React, { useState, useEffect } from \"react\";\nimport StudentDataCard from \"./components/studentDataCard/StudentDataCard\";\nimport ContentFilter from \"./components/contentFilter/ContentFilter\";\nimport styles from \"./App.module.css\";\n//Chose to use modular css to make the css more obviously tied to the relevant components\n\nfunction App() {\n\n  const [studentDataInfo, studentDataSet] = useState([]);\n  const [contentFilter, contentFilterSet] = useState([]);\n  const [nameFilter, nameFilterSet] = useState([]);\n  const [tagFilter, setTagFilter] = useState([]);\n\n  const addTag = (str, index) => {\n    const tagForStudentData = [...studentDataInfo];\n    tagForStudentData[index].tags.push(str);\n    studentDataSet(tagForStudentData);\n  };\n\n  // filter functions for sorting content\n  const nameFilterFunction = str => {\n    let newNameFilter = [];\n    studentDataInfo.map(student => {\n      const fullName = `${student.firstName} ${student.lastName}`.toLowerCase();\n      if (fullName.includes(str)) {\n        newNameFilter.push(student);\n      }\n    });\n    let contentFilter = [];\n    tagFilter.map(student => {\n      const fullName = `${student.firstName} ${student.lastName}`.toLowerCase();\n      if (fullName.includes(str)) {\n        contentFilter.push(student);\n      }\n    });\n    contentFilterSet(contentFilter);\n    nameFilterSet(newNameFilter);\n  };\n\n  const tagFilterFunction = str => {\n    if (str) {\n      let newTagFilter = [];\n      let newContentFilter = [];\n\n      studentDataInfo.map(student => {\n        let tagged = false;\n        student.tags.map(tag => {\n          if (tag.includes(str)) {\n            tagged = true;\n          }\n        });\n        if (tagged) {\n          newTagFilter.push(student);\n        }\n      });\n      contentFilter.map(student => {\n        let tagged = false;\n        student.tags.map(tag => {\n          if (tag.includes(str)) {\n            tagged = true;\n          }\n        });\n        if (tagged) {\n          newContentFilter.push(student);\n        }\n      });\n      contentFilterSet(newContentFilter);\n      setTagFilter(newTagFilter);\n    } else {\n      contentFilterSet(nameFilter);\n      setTagFilter(studentDataInfo);\n    }\n  };\n\n  //api call\n  async function fetchUrl(url) {\n    const response = await fetch(url);\n    const json = await response.json();\n    let newStudentData = [];\n    json.students.map(student => {\n      let addTags = student;\n      addTags.tags = [];\n      newStudentData.push(addTags);\n    });\n    studentDataSet(newStudentData);\n    contentFilterSet(newStudentData);\n    nameFilterSet(newStudentData);\n    setTagFilter(newStudentData);\n  }\n\n  useEffect(() => {\n    fetchUrl(`https://api.hatchways.io/assessment/students`); \n  }, []);\n  return (\n    <div className={styles.background}>\n      <div className={styles.centralContainer}>\n        <ContentFilter filterFunction={nameFilterFunction} type={`name`} />\n        <ContentFilter filterFunction={tagFilterFunction} type={`tag`} />\n        {contentFilter.map((student, index) => {\n          function findAverage(array) {\n            let sum = 0;\n            for (let i = 0; i < array.length; i++) {\n              sum += parseInt(array[i]);\n            }\n            let average = sum / array.length;\n            return average;\n          }\n          const averageGrade = findAverage(student.grades);\n          return (\n            <StudentDataCard\n              key={index.toString()}\n              index={index}\n              img={student.pic}\n              firstName={student.firstName}\n              lastName={student.lastName}\n              email={student.email}\n              company={student.company}\n              skill={student.skill}\n              grades={student.grades}\n              averageGrade={averageGrade}\n              tags={student.tags}\n              addTag={addTag}\n            />\n          );\n        })}\n      </div>\n    </div>\n  );\n}\n\nexport default App;"]},"metadata":{},"sourceType":"module"}